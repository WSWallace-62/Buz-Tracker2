rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Organizations collection - users can create and manage their own organizations
    match /organizations/{orgId} {
      // Allow creating a new organization
      allow create: if request.auth != null && request.resource.data.createdBy == request.auth.uid;

      // Allow reading if user is a member
      allow read: if request.auth != null &&
                     (resource.data.createdBy == request.auth.uid ||
                      request.auth.uid in resource.data.members);

      // Allow updating if user is the owner (createdBy) or has owner role
      allow update: if request.auth != null &&
                       (resource.data.createdBy == request.auth.uid ||
                        (request.auth.uid in resource.data.members &&
                         resource.data.members[request.auth.uid].role == 'owner'));

      // Allow deleting if user is the creator
      allow delete: if request.auth != null && resource.data.createdBy == request.auth.uid;
    }

    match /users/{userId} {
      // Allow users to read their own document.
      // Also allow organization members to read membership-related info (if organizationId exists on the user doc).
      allow read: if request.auth != null && (
        request.auth.uid == userId ||
        (
          resource.data.organizationId != null &&
          request.auth.uid in get(/databases/$(database)/documents/organizations/$(resource.data.organizationId)).data.members
        )
      );

      // Allow creating your own user document
      allow create: if request.auth != null && request.auth.uid == userId;

      // Allow updating: a user can update their own document.
      // Additionally, organization owners may update only the organizationId and role fields on a user's document.
      allow update: if request.auth != null && (
        request.auth.uid == userId ||
        (
          // require an existing organization on the user doc to locate membership
          resource.data.organizationId != null &&
          request.auth.uid in get(/databases/$(database)/documents/organizations/$(resource.data.organizationId)).data.members &&
          get(/databases/$(database)/documents/organizations/$(resource.data.organizationId)).data.members[request.auth.uid].role == 'owner' &&
          // ensure only organizationId and role fields are changed by the org owner
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['organizationId', 'role'])
        )
      );

      // Allow deleting your own user document
      allow delete: if request.auth != null && request.auth.uid == userId;

      // Allow users to manage their own projects and sessions
      match /projects/{projectId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;

        match /sessions/{sessionId} {
          allow read, write: if request.auth != null && request.auth.uid == userId;
        }
      }

      // Allow users to manage their own FCM tokens for push notifications
      match /fcmTokens/{tokenId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      // Allow users to manage their own running session status
      // The document ID is explicitly 'runningSession'
      match /status/runningSession {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      // Allow users to manage their own configuration settings
      match /config/settings {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
  }
}

service firebase.storage {
  match /b/{bucket}/o {
    // Allow authenticated users to upload their own avatars
    match /avatars/{userId} {
      allow write: if request.auth != null && request.auth.uid == userId;
      allow read: if true; // Public read access for avatars
    }
  }
}
